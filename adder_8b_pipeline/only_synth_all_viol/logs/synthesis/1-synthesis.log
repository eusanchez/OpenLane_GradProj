
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2020  Claire Xenia Wolf <claire@yosyshq.com>         |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.22 (git sha1 f109fa3d4c5, gcc 8.3.1 -fPIC -Os)

[TCL: yosys -import] Command name collision: found pre-existing command `cd' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `eval' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `exec' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `read' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `trace' -> skip.

1. Executing Verilog-2005 frontend: /openlane/designs/adder_8b_pipeline/src/adder_8b_pipeline.v
Parsing SystemVerilog input from `/openlane/designs/adder_8b_pipeline/src/adder_8b_pipeline.v' to AST representation.
Generating RTLIL representation for module `\adder_8b_pipeline'.
Successfully finished Verilog frontend.

2. Executing Verilog-2005 frontend: /openlane/designs/adder_8b_pipeline/src/adder_4b.v
Parsing SystemVerilog input from `/openlane/designs/adder_8b_pipeline/src/adder_4b.v' to AST representation.
Generating RTLIL representation for module `\adder_4b'.
Successfully finished Verilog frontend.

3. Generating Graphviz representation of design.
Writing dot description to `/openlane/designs/adder_8b_pipeline/runs/only_synth_all_viol/tmp/synthesis/hierarchy.dot'.
Dumping module adder_8b_pipeline to page 1.
Warning: WIDTHLABEL \B [3:0] 4
Warning: WIDTHLABEL \A [3:0] 4

4. Executing HIERARCHY pass (managing design hierarchy).

4.1. Analyzing design hierarchy..
Top module:  \adder_8b_pipeline
Used module:     \adder_4b

4.2. Analyzing design hierarchy..
Top module:  \adder_8b_pipeline
Used module:     \adder_4b
Removed 0 unused modules.
Mapping positional arguments of cell adder_8b_pipeline.a41 (adder_4b).
Mapping positional arguments of cell adder_8b_pipeline.a40 (adder_4b).

5. Executing TRIBUF pass.

6. Executing HIERARCHY pass (managing design hierarchy).

6.1. Analyzing design hierarchy..
Top module:  \adder_8b_pipeline
Used module:     \adder_4b

6.2. Analyzing design hierarchy..
Top module:  \adder_8b_pipeline
Used module:     \adder_4b
Removed 0 unused modules.

7. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

8. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Marked 1 switch rules as full_case in process $proc$/openlane/designs/adder_8b_pipeline/src/adder_8b_pipeline.v:27$1 in module adder_8b_pipeline.
Removed a total of 0 dead cases.

9. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 4 redundant assignments.
Promoted 0 assignments to connections.

10. Executing PROC_INIT pass (extract init attributes).

11. Executing PROC_ARST pass (detect async resets in processes).

12. Executing PROC_ROM pass (convert switches to ROMs).
Converted 0 switches.
<suppressed ~1 debug messages>

13. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `\adder_8b_pipeline.$proc$/openlane/designs/adder_8b_pipeline/src/adder_8b_pipeline.v:27$1'.
     1/4: $0\B_msbits[3:0]
     2/4: $0\A_msbits[3:0]
     3/4: $0\C_out_a0_reg[0:0]
     4/4: $0\Sum_a0_reg[3:0]

14. Executing PROC_DLATCH pass (convert process syncs to latches).

15. Executing PROC_DFF pass (convert process syncs to FFs).
Creating register for signal `\adder_8b_pipeline.\C_out_a0_reg' using process `\adder_8b_pipeline.$proc$/openlane/designs/adder_8b_pipeline/src/adder_8b_pipeline.v:27$1'.
  created $dff cell `$procdff$17' with positive edge clock.
Creating register for signal `\adder_8b_pipeline.\A_msbits' using process `\adder_8b_pipeline.$proc$/openlane/designs/adder_8b_pipeline/src/adder_8b_pipeline.v:27$1'.
  created $dff cell `$procdff$18' with positive edge clock.
Creating register for signal `\adder_8b_pipeline.\B_msbits' using process `\adder_8b_pipeline.$proc$/openlane/designs/adder_8b_pipeline/src/adder_8b_pipeline.v:27$1'.
  created $dff cell `$procdff$19' with positive edge clock.
Creating register for signal `\adder_8b_pipeline.\Sum_a0_reg' using process `\adder_8b_pipeline.$proc$/openlane/designs/adder_8b_pipeline/src/adder_8b_pipeline.v:27$1'.
  created $dff cell `$procdff$20' with positive edge clock.

16. Executing PROC_MEMWR pass (convert process memory writes to cells).

17. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Found and cleaned up 1 empty switch in `\adder_8b_pipeline.$proc$/openlane/designs/adder_8b_pipeline/src/adder_8b_pipeline.v:27$1'.
Removing empty process `adder_8b_pipeline.$proc$/openlane/designs/adder_8b_pipeline/src/adder_8b_pipeline.v:27$1'.
Cleaned up 1 empty switch.

18. Executing OPT_EXPR pass (perform const folding).
Optimizing module adder_4b.
Optimizing module adder_8b_pipeline.
<suppressed ~4 debug messages>

19. Executing FLATTEN pass (flatten design).
Deleting now unused module adder_4b.
<suppressed ~2 debug messages>

20. Executing OPT_EXPR pass (perform const folding).
Optimizing module adder_8b_pipeline.

21. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \adder_8b_pipeline..
Removed 1 unused cells and 11 unused wires.
<suppressed ~2 debug messages>

22. Executing CHECK pass (checking for obvious problems).
Checking module adder_8b_pipeline...
Found and reported 0 problems.

23. Executing OPT pass (performing simple optimizations).

23.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module adder_8b_pipeline.

23.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\adder_8b_pipeline'.
Removed a total of 0 cells.

23.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \adder_8b_pipeline..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~4 debug messages>

23.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \adder_8b_pipeline.
Performed a total of 0 changes.

23.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\adder_8b_pipeline'.
Removed a total of 0 cells.

23.6. Executing OPT_DFF pass (perform DFF optimizations).

23.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \adder_8b_pipeline..

23.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module adder_8b_pipeline.

23.9. Finished OPT passes. (There is nothing left to do.)

24. Executing FSM pass (extract and optimize FSM).

24.1. Executing FSM_DETECT pass (finding FSMs in design).

24.2. Executing FSM_EXTRACT pass (extracting FSM from design).

24.3. Executing FSM_OPT pass (simple optimizations of FSMs).

24.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \adder_8b_pipeline..

24.5. Executing FSM_OPT pass (simple optimizations of FSMs).

24.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).

24.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

24.8. Executing FSM_MAP pass (mapping FSMs to basic logic).

25. Executing OPT pass (performing simple optimizations).

25.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module adder_8b_pipeline.

25.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\adder_8b_pipeline'.
Removed a total of 0 cells.

25.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \adder_8b_pipeline..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~4 debug messages>

25.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \adder_8b_pipeline.
Performed a total of 0 changes.

25.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\adder_8b_pipeline'.
Removed a total of 0 cells.

25.6. Executing OPT_DFF pass (perform DFF optimizations).
Adding SRST signal on $procdff$20 ($dff) from module adder_8b_pipeline (D = \Sum_a0, Q = \Sum_a0_reg, rval = 4'0000).
Adding SRST signal on $procdff$19 ($dff) from module adder_8b_pipeline (D = \B [7:4], Q = \B_msbits, rval = 4'0000).
Adding SRST signal on $procdff$18 ($dff) from module adder_8b_pipeline (D = \A [7:4], Q = \A_msbits, rval = 4'0000).
Adding SRST signal on $procdff$17 ($dff) from module adder_8b_pipeline (D = \C_out_a0, Q = \C_out_a0_reg, rval = 1'0).

25.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \adder_8b_pipeline..
Removed 4 unused cells and 4 unused wires.
<suppressed ~5 debug messages>

25.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module adder_8b_pipeline.

25.9. Rerunning OPT passes. (Maybe there is more to do..)

25.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \adder_8b_pipeline..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

25.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \adder_8b_pipeline.
Performed a total of 0 changes.

25.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\adder_8b_pipeline'.
Removed a total of 0 cells.

25.13. Executing OPT_DFF pass (perform DFF optimizations).

25.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \adder_8b_pipeline..

25.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module adder_8b_pipeline.

25.16. Finished OPT passes. (There is nothing left to do.)

26. Executing WREDUCE pass (reducing word size of cells).

27. Executing PEEPOPT pass (run peephole optimizers).

28. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \adder_8b_pipeline..

29. Executing ALUMACC pass (create $alu and $macc cells).
Extracting $alu and $macc cells in module adder_8b_pipeline:
  creating $macc model for $flatten\a40.$add$/openlane/designs/adder_8b_pipeline/src/adder_4b.v:8$3 ($add).
  creating $macc model for $flatten\a40.$add$/openlane/designs/adder_8b_pipeline/src/adder_4b.v:8$4 ($add).
  creating $macc model for $flatten\a41.$add$/openlane/designs/adder_8b_pipeline/src/adder_4b.v:8$3 ($add).
  creating $macc model for $flatten\a41.$add$/openlane/designs/adder_8b_pipeline/src/adder_4b.v:8$4 ($add).
  merging $macc model for $flatten\a41.$add$/openlane/designs/adder_8b_pipeline/src/adder_4b.v:8$3 into $flatten\a41.$add$/openlane/designs/adder_8b_pipeline/src/adder_4b.v:8$4.
  merging $macc model for $flatten\a40.$add$/openlane/designs/adder_8b_pipeline/src/adder_4b.v:8$3 into $flatten\a40.$add$/openlane/designs/adder_8b_pipeline/src/adder_4b.v:8$4.
  creating $alu model for $macc $flatten\a40.$add$/openlane/designs/adder_8b_pipeline/src/adder_4b.v:8$4.
  creating $alu model for $macc $flatten\a41.$add$/openlane/designs/adder_8b_pipeline/src/adder_4b.v:8$4.
  creating $alu cell for $flatten\a41.$add$/openlane/designs/adder_8b_pipeline/src/adder_4b.v:8$4: $auto$alumacc.cc:485:replace_alu$25
  creating $alu cell for $flatten\a40.$add$/openlane/designs/adder_8b_pipeline/src/adder_4b.v:8$4: $auto$alumacc.cc:485:replace_alu$28
  created 2 $alu and 0 $macc cells.

30. Executing SHARE pass (SAT-based resource sharing).

31. Executing OPT pass (performing simple optimizations).

31.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module adder_8b_pipeline.

31.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\adder_8b_pipeline'.
Removed a total of 0 cells.

31.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \adder_8b_pipeline..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

31.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \adder_8b_pipeline.
Performed a total of 0 changes.

31.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\adder_8b_pipeline'.
Removed a total of 0 cells.

31.6. Executing OPT_DFF pass (perform DFF optimizations).

31.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \adder_8b_pipeline..
Removed 2 unused cells and 2 unused wires.
<suppressed ~3 debug messages>

31.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module adder_8b_pipeline.

31.9. Rerunning OPT passes. (Maybe there is more to do..)

31.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \adder_8b_pipeline..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

31.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \adder_8b_pipeline.
Performed a total of 0 changes.

31.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\adder_8b_pipeline'.
Removed a total of 0 cells.

31.13. Executing OPT_DFF pass (perform DFF optimizations).

31.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \adder_8b_pipeline..

31.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module adder_8b_pipeline.

31.16. Finished OPT passes. (There is nothing left to do.)

32. Executing MEMORY pass.

32.1. Executing OPT_MEM pass (optimize memories).
Performed a total of 0 transformations.

32.2. Executing OPT_MEM_PRIORITY pass (removing unnecessary memory write priority relations).
Performed a total of 0 transformations.

32.3. Executing OPT_MEM_FEEDBACK pass (finding memory read-to-write feedback paths).

32.4. Executing MEMORY_BMUX2ROM pass (converting muxes to ROMs).

32.5. Executing MEMORY_DFF pass (merging $dff cells to $memrd).

32.6. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \adder_8b_pipeline..

32.7. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).

32.8. Executing OPT_MEM_WIDEN pass (optimize memories where all ports are wide).
Performed a total of 0 transformations.

32.9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \adder_8b_pipeline..

32.10. Executing MEMORY_COLLECT pass (generating $mem cells).

33. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \adder_8b_pipeline..

34. Executing OPT pass (performing simple optimizations).

34.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module adder_8b_pipeline.

34.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\adder_8b_pipeline'.
Removed a total of 0 cells.

34.3. Executing OPT_DFF pass (perform DFF optimizations).

34.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \adder_8b_pipeline..

34.5. Finished fast OPT passes.

35. Executing MEMORY_MAP pass (converting memories to logic and flip-flops).

36. Executing OPT pass (performing simple optimizations).

36.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module adder_8b_pipeline.

36.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\adder_8b_pipeline'.
Removed a total of 0 cells.

36.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \adder_8b_pipeline..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

36.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \adder_8b_pipeline.
Performed a total of 0 changes.

36.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\adder_8b_pipeline'.
Removed a total of 0 cells.

36.6. Executing OPT_SHARE pass.

36.7. Executing OPT_DFF pass (perform DFF optimizations).

36.8. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \adder_8b_pipeline..

36.9. Executing OPT_EXPR pass (perform const folding).
Optimizing module adder_8b_pipeline.

36.10. Finished OPT passes. (There is nothing left to do.)

37. Executing TECHMAP pass (map to technology primitives).

37.1. Executing Verilog-2005 frontend: /build/bin/../share/yosys/techmap.v
Parsing Verilog input from `/build/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_demux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

37.2. Continuing TECHMAP pass.
Using template $paramod$b85fbb3374a1d9ba7ee4f4d6323c30f939df3ada\_90_alu for cells of type $alu.
Using extmapper simplemap for cells of type $sdff.
Using extmapper simplemap for cells of type $xor.
Using extmapper simplemap for cells of type $and.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000000101 for cells of type $lcu.
Using extmapper simplemap for cells of type $pos.
Using extmapper simplemap for cells of type $mux.
Using extmapper simplemap for cells of type $not.
Using extmapper simplemap for cells of type $or.
No more expansions possible.
<suppressed ~248 debug messages>

38. Executing OPT pass (performing simple optimizations).

38.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module adder_8b_pipeline.
<suppressed ~24 debug messages>

38.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\adder_8b_pipeline'.
Removed a total of 0 cells.

38.3. Executing OPT_DFF pass (perform DFF optimizations).

38.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \adder_8b_pipeline..
Removed 8 unused cells and 50 unused wires.
<suppressed ~9 debug messages>

38.5. Finished fast OPT passes.

39. Executing ABC pass (technology mapping using ABC).

39.1. Extracting gate netlist of module `\adder_8b_pipeline' to `<abc-temp-dir>/input.blif'..
Extracted 46 gates and 64 wires to a netlist network with 18 inputs and 10 outputs.

39.1.1. Executing ABC.
Running ABC command: "<yosys-exe-dir>/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

39.1.2. Re-integrating ABC results.
ABC RESULTS:             ORNOT cells:        2
ABC RESULTS:              XNOR cells:       12
ABC RESULTS:              NAND cells:        6
ABC RESULTS:               XOR cells:        4
ABC RESULTS:               AND cells:        2
ABC RESULTS:               NOR cells:        2
ABC RESULTS:            ANDNOT cells:       12
ABC RESULTS:                OR cells:        6
ABC RESULTS:        internal signals:       36
ABC RESULTS:           input signals:       18
ABC RESULTS:          output signals:       10
Removing temp directory.

40. Executing OPT pass (performing simple optimizations).

40.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module adder_8b_pipeline.

40.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\adder_8b_pipeline'.
Removed a total of 0 cells.

40.3. Executing OPT_DFF pass (perform DFF optimizations).

40.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \adder_8b_pipeline..
Removed 0 unused cells and 48 unused wires.
<suppressed ~1 debug messages>

40.5. Finished fast OPT passes.

41. Executing HIERARCHY pass (managing design hierarchy).

41.1. Analyzing design hierarchy..
Top module:  \adder_8b_pipeline

41.2. Analyzing design hierarchy..
Top module:  \adder_8b_pipeline
Removed 0 unused modules.

42. Printing statistics.

=== adder_8b_pipeline ===

   Number of wires:                 61
   Number of wire bits:            115
   Number of public wires:          25
   Number of public wire bits:      79
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 59
     $_ANDNOT_                      12
     $_AND_                          2
     $_NAND_                         6
     $_NOR_                          2
     $_ORNOT_                        2
     $_OR_                           6
     $_SDFF_PN0_                    13
     $_XNOR_                        12
     $_XOR_                          4

43. Executing CHECK pass (checking for obvious problems).
Checking module adder_8b_pipeline...
Found and reported 0 problems.

44. Generating Graphviz representation of design.
Writing dot description to `/openlane/designs/adder_8b_pipeline/runs/only_synth_all_viol/tmp/synthesis/post_techmap.dot'.
Dumping module adder_8b_pipeline to page 1.
Warning: WIDTHLABEL \A_msbits [0] 1
Warning: WIDTHLABEL \B_msbits [0] 1
Warning: WIDTHLABEL \Sum [4] 1
Warning: WIDTHLABEL \A_msbits [1] 1
Warning: WIDTHLABEL \B_msbits [1] 1
Warning: WIDTHLABEL \A_msbits [0] 1
Warning: WIDTHLABEL \B_msbits [0] 1
Warning: WIDTHLABEL \Sum [5] 1
Warning: WIDTHLABEL \A_msbits [2] 1
Warning: WIDTHLABEL \B_msbits [2] 1
Warning: WIDTHLABEL \A_msbits [1] 1
Warning: WIDTHLABEL \B_msbits [1] 1
Warning: WIDTHLABEL \Sum [6] 1
Warning: WIDTHLABEL \A_msbits [3] 1
Warning: WIDTHLABEL \B_msbits [3] 1
Warning: WIDTHLABEL \A_msbits [2] 1
Warning: WIDTHLABEL \B_msbits [2] 1
Warning: WIDTHLABEL \Sum [7] 1
Warning: WIDTHLABEL \B [0] 1
Warning: WIDTHLABEL \A [0] 1
Warning: WIDTHLABEL \Sum_a0 [0] 1
Warning: WIDTHLABEL \B [1] 1
Warning: WIDTHLABEL \A [1] 1
Warning: WIDTHLABEL \B [0] 1
Warning: WIDTHLABEL \A [0] 1
Warning: WIDTHLABEL \Sum_a0 [1] 1
Warning: WIDTHLABEL \B [2] 1
Warning: WIDTHLABEL \A [2] 1
Warning: WIDTHLABEL \B [1] 1
Warning: WIDTHLABEL \A [1] 1
Warning: WIDTHLABEL \Sum_a0 [2] 1
Warning: WIDTHLABEL \B [3] 1
Warning: WIDTHLABEL \A [3] 1
Warning: WIDTHLABEL \B [2] 1
Warning: WIDTHLABEL \A [2] 1
Warning: WIDTHLABEL \Sum_a0 [3] 1
Warning: WIDTHLABEL \A_msbits [3] 1
Warning: WIDTHLABEL \B_msbits [3] 1
Warning: WIDTHLABEL \B [3] 1
Warning: WIDTHLABEL \A [3] 1
Warning: WIDTHLABEL \A [4] 1
Warning: WIDTHLABEL \A_msbits [0] 1
Warning: WIDTHLABEL \A [5] 1
Warning: WIDTHLABEL \A_msbits [1] 1
Warning: WIDTHLABEL \A [6] 1
Warning: WIDTHLABEL \A_msbits [2] 1
Warning: WIDTHLABEL \A [7] 1
Warning: WIDTHLABEL \A_msbits [3] 1
Warning: WIDTHLABEL \B [4] 1
Warning: WIDTHLABEL \B_msbits [0] 1
Warning: WIDTHLABEL \B [5] 1
Warning: WIDTHLABEL \B_msbits [1] 1
Warning: WIDTHLABEL \B [6] 1
Warning: WIDTHLABEL \B_msbits [2] 1
Warning: WIDTHLABEL \B [7] 1
Warning: WIDTHLABEL \B_msbits [3] 1
Warning: WIDTHLABEL \Sum_a0 [0] 1
Warning: WIDTHLABEL \Sum_a0_reg [0] 1
Warning: WIDTHLABEL \Sum_a0 [1] 1
Warning: WIDTHLABEL \Sum_a0_reg [1] 1
Warning: WIDTHLABEL \Sum_a0 [2] 1
Warning: WIDTHLABEL \Sum_a0_reg [2] 1
Warning: WIDTHLABEL \Sum_a0 [3] 1
Warning: WIDTHLABEL \Sum_a0_reg [3] 1

45. Executing SHARE pass (SAT-based resource sharing).

46. Executing OPT pass (performing simple optimizations).

46.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module adder_8b_pipeline.

46.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\adder_8b_pipeline'.
Removed a total of 0 cells.

46.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \adder_8b_pipeline..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

46.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \adder_8b_pipeline.
Performed a total of 0 changes.

46.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\adder_8b_pipeline'.
Removed a total of 0 cells.

46.6. Executing OPT_DFF pass (perform DFF optimizations).

46.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \adder_8b_pipeline..

46.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module adder_8b_pipeline.

46.9. Finished OPT passes. (There is nothing left to do.)

47. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \adder_8b_pipeline..
Removed 0 unused cells and 13 unused wires.
<suppressed ~13 debug messages>

48. Printing statistics.

=== adder_8b_pipeline ===

   Number of wires:                 48
   Number of wire bits:             78
   Number of public wires:          12
   Number of public wire bits:      42
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 59
     $_ANDNOT_                      12
     $_AND_                          2
     $_NAND_                         6
     $_NOR_                          2
     $_ORNOT_                        2
     $_OR_                           6
     $_SDFF_PN0_                    13
     $_XNOR_                        12
     $_XOR_                          4

mapping tbuf

49. Executing TECHMAP pass (map to technology primitives).

49.1. Executing Verilog-2005 frontend: /root/.volare/sky130A/libs.tech/openlane/sky130_fd_sc_hd/tribuff_map.v
Parsing Verilog input from `/root/.volare/sky130A/libs.tech/openlane/sky130_fd_sc_hd/tribuff_map.v' to AST representation.
Generating RTLIL representation for module `\$_TBUF_'.
Successfully finished Verilog frontend.

49.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~3 debug messages>

50. Executing SIMPLEMAP pass (map simple cells to gate primitives).

51. Executing TECHMAP pass (map to technology primitives).

51.1. Executing Verilog-2005 frontend: /root/.volare/sky130A/libs.tech/openlane/sky130_fd_sc_hd/latch_map.v
Parsing Verilog input from `/root/.volare/sky130A/libs.tech/openlane/sky130_fd_sc_hd/latch_map.v' to AST representation.
Generating RTLIL representation for module `\$_DLATCH_P_'.
Generating RTLIL representation for module `\$_DLATCH_N_'.
Successfully finished Verilog frontend.

51.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~4 debug messages>

52. Executing SIMPLEMAP pass (map simple cells to gate primitives).

53. Executing DFFLIBMAP pass (mapping DFF cells to sequential cells from liberty file).
  cell sky130_fd_sc_hd__dfxtp_2 (noninv, pins=3, area=21.27) is a direct match for cell type $_DFF_P_.
  cell sky130_fd_sc_hd__dfrtp_2 (noninv, pins=4, area=26.28) is a direct match for cell type $_DFF_PN0_.
  cell sky130_fd_sc_hd__dfstp_2 (noninv, pins=4, area=26.28) is a direct match for cell type $_DFF_PN1_.
  cell sky130_fd_sc_hd__dfbbn_2 (noninv, pins=6, area=35.03) is a direct match for cell type $_DFFSR_NNN_.
  final dff cell mappings:
    unmapped dff cell: $_DFF_N_
    \sky130_fd_sc_hd__dfxtp_2 _DFF_P_ (.CLK( C), .D( D), .Q( Q));
    unmapped dff cell: $_DFF_NN0_
    unmapped dff cell: $_DFF_NN1_
    unmapped dff cell: $_DFF_NP0_
    unmapped dff cell: $_DFF_NP1_
    \sky130_fd_sc_hd__dfrtp_2 _DFF_PN0_ (.CLK( C), .D( D), .Q( Q), .RESET_B( R));
    \sky130_fd_sc_hd__dfstp_2 _DFF_PN1_ (.CLK( C), .D( D), .Q( Q), .SET_B( R));
    unmapped dff cell: $_DFF_PP0_
    unmapped dff cell: $_DFF_PP1_
    \sky130_fd_sc_hd__dfbbn_2 _DFFSR_NNN_ (.CLK_N( C), .D( D), .Q( Q), .Q_N(~Q), .RESET_B( R), .SET_B( S));
    unmapped dff cell: $_DFFSR_NNP_
    unmapped dff cell: $_DFFSR_NPN_
    unmapped dff cell: $_DFFSR_NPP_
    unmapped dff cell: $_DFFSR_PNN_
    unmapped dff cell: $_DFFSR_PNP_
    unmapped dff cell: $_DFFSR_PPN_
    unmapped dff cell: $_DFFSR_PPP_

53.1. Executing DFFLEGALIZE pass (convert FFs to types supported by the target).
Mapping DFF cells in module `\adder_8b_pipeline':
  mapped 13 $_DFF_P_ cells to \sky130_fd_sc_hd__dfxtp_2 cells.

54. Printing statistics.

=== adder_8b_pipeline ===

   Number of wires:                 61
   Number of wire bits:             91
   Number of public wires:          12
   Number of public wire bits:      42
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 72
     $_ANDNOT_                      12
     $_AND_                          2
     $_MUX_                         13
     $_NAND_                         6
     $_NOR_                          2
     $_ORNOT_                        2
     $_OR_                           6
     $_XNOR_                        12
     $_XOR_                          4
     sky130_fd_sc_hd__dfxtp_2       13

[INFO]: USING STRATEGY AREA 0

55. Executing ABC pass (technology mapping using ABC).

55.1. Extracting gate netlist of module `\adder_8b_pipeline' to `/tmp/yosys-abc-IY5Y0u/input.blif'..
Extracted 59 gates and 87 wires to a netlist network with 27 inputs and 18 outputs.

55.1.1. Executing ABC.
Running ABC command: "/build/bin/yosys-abc" -s -f /tmp/yosys-abc-IY5Y0u/abc.script 2>&1
ABC: ABC command line: "source /tmp/yosys-abc-IY5Y0u/abc.script".
ABC: 
ABC: + read_blif /tmp/yosys-abc-IY5Y0u/input.blif 
ABC: + read_lib -w /openlane/designs/adder_8b_pipeline/runs/only_synth_all_viol/tmp/synthesis/trimmed.lib 
ABC: Parsing finished successfully.  Parsing time =     0.05 sec
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfbbn_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfrbp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfrtp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfrtp_4".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfsbp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfstp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfstp_4".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfxbp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfxtp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfxtp_4".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dlxtn_1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dlxtn_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dlxtn_4".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dlxtp_1".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "sky130_fd_sc_hd__ebufn_2".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "sky130_fd_sc_hd__ebufn_4".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "sky130_fd_sc_hd__ebufn_8".
ABC: Library "sky130A_merged" from "/openlane/designs/adder_8b_pipeline/runs/only_synth_all_viol/tmp/synthesis/trimmed.lib" has 175 cells (17 skipped: 14 seq; 3 tri-state; 0 no func; 0 dont_use).  Time =     0.08 sec
ABC: Memory =    9.54 MB. Time =     0.08 sec
ABC: Warning: Detected 2 multi-output gates (for example, "sky130_fd_sc_hd__fa_1").
ABC: + read_constr -v /openlane/designs/adder_8b_pipeline/runs/only_synth_all_viol/tmp/synthesis/synthesis.sdc 
ABC: Setting driving cell to be "sky130_fd_sc_hd__inv_2".
ABC: Setting output load to be 33.442001.
ABC: + read_constr /openlane/designs/adder_8b_pipeline/runs/only_synth_all_viol/tmp/synthesis/synthesis.sdc 
ABC: + fx 
ABC: + mfs 
ABC: + strash 
ABC: + refactor 
ABC: + balance 
ABC: + rewrite 
ABC: + refactor 
ABC: + balance 
ABC: + rewrite 
ABC: + rewrite -z 
ABC: + balance 
ABC: + refactor -z 
ABC: + rewrite -z 
ABC: + balance 
ABC: + retime -D -D 10000.0 -M 5 
ABC: + scleanup 
ABC: Error: The network is combinational.
ABC: + fraig_store 
ABC: + balance 
ABC: + fraig_store 
ABC: + balance 
ABC: + rewrite 
ABC: + refactor 
ABC: + balance 
ABC: + rewrite 
ABC: + rewrite -z 
ABC: + balance 
ABC: + refactor -z 
ABC: + rewrite -z 
ABC: + balance 
ABC: + fraig_store 
ABC: + balance 
ABC: + rewrite 
ABC: + refactor 
ABC: + balance 
ABC: + rewrite 
ABC: + rewrite -z 
ABC: + balance 
ABC: + refactor -z 
ABC: + rewrite -z 
ABC: + balance 
ABC: + fraig_store 
ABC: + balance 
ABC: + rewrite 
ABC: + refactor 
ABC: + balance 
ABC: + rewrite 
ABC: + rewrite -z 
ABC: + balance 
ABC: + refactor -z 
ABC: + rewrite -z 
ABC: + balance 
ABC: + fraig_store 
ABC: + fraig_restore 
ABC: + amap -m -Q 0.1 -F 20 -A 20 -C 5000 
ABC: + retime -D -D 10000.0 
ABC: + &get -n 
ABC: + &st 
ABC: + &dch 
ABC: + &nf 
ABC: + &put 
ABC: + buffer -N 10 -S 750.0 
ABC: + upsize -D 10000.0 
ABC: Current delay (1474.41 ps) does not exceed the target delay (10000.00 ps). Upsizing is not performed.
ABC: + dnsize -D 10000.0 
ABC: + stime -p 
ABC: WireLoad = "none"  Gates =     65 ( 16.9 %)   Cap = 11.3 ff (  4.2 %)   Area =      496.73 ( 83.1 %)   Delay =  1533.35 ps  (  9.2 %)               
ABC: Path  0 --      11 : 0    2 pi                        A =   0.00  Df =  21.4  -12.5 ps  S =  35.3 ps  Cin =  0.0 ff  Cout =   6.1 ff  Cmax =   0.0 ff  G =    0  
ABC: Path  1 --      69 : 2    3 sky130_fd_sc_hd__nand2_2  A =   6.26  Df =  76.9   -3.3 ps  S =  64.6 ps  Cin =  4.4 ff  Cout =   8.7 ff  Cmax = 295.7 ff  G =  189  
ABC: Path  2 --      70 : 3    4 sky130_fd_sc_hd__a21boi_2 A =  11.26  Df = 552.1 -300.8 ps  S = 204.4 ps  Cin =  3.6 ff  Cout =  14.7 ff  Cmax = 129.1 ff  G =  389  
ABC: Path  3 --      75 : 4    3 sky130_fd_sc_hd__o211a_2  A =  10.01  Df = 779.6 -252.0 ps  S =  71.3 ps  Cin =  2.4 ff  Cout =   8.2 ff  Cmax = 268.3 ff  G =  323  
ABC: Path  4 --     106 : 4    1 sky130_fd_sc_hd__or4b_2   A =  10.01  Df =1115.0 -228.6 ps  S =  91.5 ps  Cin =  1.5 ff  Cout =   1.5 ff  Cmax = 265.5 ff  G =  102  
ABC: Path  5 --     109 : 3    1 sky130_fd_sc_hd__and3_2   A =   7.51  Df =1318.9 -282.1 ps  S =  40.1 ps  Cin =  1.5 ff  Cout =   2.2 ff  Cmax = 309.5 ff  G =  141  
ABC: Path  6 --     110 : 1    1 sky130_fd_sc_hd__buf_1    A =   3.75  Df =1533.4 -175.1 ps  S = 396.5 ps  Cin =  2.1 ff  Cout =  33.4 ff  Cmax = 130.0 ff  G = 1590  
ABC: Start-point = pi10 (\A [0]).  End-point = po17 ($auto$rtlil.cc:2560:MuxGate$295).
ABC: + print_stats -m 
ABC: netlist                       : i/o =   27/   18  lat =    0  nd =    65  edge =    141  area =496.83  delay = 6.00  lev = 6
ABC: + write_blif /tmp/yosys-abc-IY5Y0u/output.blif 

55.1.2. Re-integrating ABC results.
ABC RESULTS:   sky130_fd_sc_hd__xnor2_2 cells:        4
ABC RESULTS:   sky130_fd_sc_hd__a21bo_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__nor2_2 cells:        4
ABC RESULTS:   sky130_fd_sc_hd__or2_2 cells:        5
ABC RESULTS:   sky130_fd_sc_hd__o211a_2 cells:        2
ABC RESULTS:   sky130_fd_sc_hd__and2_2 cells:        9
ABC RESULTS:   sky130_fd_sc_hd__nand3_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__a21o_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__a21boi_2 cells:        3
ABC RESULTS:   sky130_fd_sc_hd__o21a_2 cells:        2
ABC RESULTS:   sky130_fd_sc_hd__and2b_2 cells:        3
ABC RESULTS:   sky130_fd_sc_hd__o21ai_2 cells:        3
ABC RESULTS:   sky130_fd_sc_hd__a21oi_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__or4b_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__nand2_2 cells:       11
ABC RESULTS:   sky130_fd_sc_hd__a2bb2o_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__and3_2 cells:        2
ABC RESULTS:   sky130_fd_sc_hd__buf_1 cells:       11
ABC RESULTS:        internal signals:       42
ABC RESULTS:           input signals:       27
ABC RESULTS:          output signals:       18
Removing temp directory.

56. Executing SETUNDEF pass (replace undef values with defined constants).

57. Executing HILOMAP pass (mapping to constant drivers).

58. Executing SPLITNETS pass (splitting up multi-bit signals).

59. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \adder_8b_pipeline..
Removed 0 unused cells and 86 unused wires.
<suppressed ~6 debug messages>

60. Executing INSBUF pass (insert buffer cells for connected wires).

61. Executing CHECK pass (checking for obvious problems).
Checking module adder_8b_pipeline...
Warning: Wire adder_8b_pipeline.\Sum [7] is used but has no driver.
Warning: Wire adder_8b_pipeline.\Sum [6] is used but has no driver.
Warning: Wire adder_8b_pipeline.\Sum [5] is used but has no driver.
Warning: Wire adder_8b_pipeline.\Sum [4] is used but has no driver.
Warning: Wire adder_8b_pipeline.\Sum [3] is used but has no driver.
Warning: Wire adder_8b_pipeline.\Sum [2] is used but has no driver.
Warning: Wire adder_8b_pipeline.\Sum [1] is used but has no driver.
Warning: Wire adder_8b_pipeline.\Sum [0] is used but has no driver.
Warning: Wire adder_8b_pipeline.\C_out is used but has no driver.
Found and reported 9 problems.

62. Printing statistics.

=== adder_8b_pipeline ===

   Number of wires:                 76
   Number of wire bits:             97
   Number of public wires:          16
   Number of public wire bits:      37
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 78
     sky130_fd_sc_hd__a21bo_2        1
     sky130_fd_sc_hd__a21boi_2       3
     sky130_fd_sc_hd__a21o_2         1
     sky130_fd_sc_hd__a21oi_2        1
     sky130_fd_sc_hd__a2bb2o_2       1
     sky130_fd_sc_hd__and2_2         9
     sky130_fd_sc_hd__and2b_2        3
     sky130_fd_sc_hd__and3_2         2
     sky130_fd_sc_hd__buf_1         11
     sky130_fd_sc_hd__dfxtp_2       13
     sky130_fd_sc_hd__nand2_2       11
     sky130_fd_sc_hd__nand3_2        1
     sky130_fd_sc_hd__nor2_2         4
     sky130_fd_sc_hd__o211a_2        2
     sky130_fd_sc_hd__o21a_2         2
     sky130_fd_sc_hd__o21ai_2        3
     sky130_fd_sc_hd__or2_2          5
     sky130_fd_sc_hd__or4b_2         1
     sky130_fd_sc_hd__xnor2_2        4

   Chip area for module '\adder_8b_pipeline': 773.241600

63. Executing Verilog backend.

63.1. Executing BMUXMAP pass.

63.2. Executing DEMUXMAP pass.
Dumping module `\adder_8b_pipeline'.

Warnings: 47 unique messages, 75 total
End of script. Logfile hash: d7dfac8831, CPU: user 0.34s system 0.02s, MEM: 28.38 MB peak
Yosys 0.22 (git sha1 f109fa3d4c5, gcc 8.3.1 -fPIC -Os)
Time spent: 44% 2x abc (0 sec), 18% 4x stat (0 sec), ...
